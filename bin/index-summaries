#!/usr/bin/env ruby

# index-summaries: Bulk index multiple GitHub conversations into Qdrant
#
# This script orchestrates bulk indexing of GitHub conversations by running index-summary
# on each URL. It accepts URLs either from stdin (piped) or from a file, and supports
# both plain text URLs and JSON input with updated_at timestamps.
#
# Features:
# - Uses bin/index-summary for each URL
# - Passes through all CLI arguments to index-summary
# - Accepts URLs from stdin (piped) or from a file
# - Supports both plain text URLs and JSON input from search-github-conversations
# - Automatically uses updated_at timestamps from JSON input for efficient caching
# - Streams JSON output to stdout for successful indexing
# - Continues processing even if individual URLs fail
#
# Examples
#
#   # From file with plain text URLs
#   index-summaries \
#     --executive-summary-prompt-path ./prompts/summary.txt \
#     --topics-prompt-path ./prompts/topics.txt \
#     --collection github-conversations \
#     urls.txt
#
#   # From search-github-conversations output (JSON with updated_at timestamps)
#   search-github-conversations 'repo:octocat/Hello-World created:>2025' | \
#     index-summaries \
#       --executive-summary-prompt-path ./prompts/summary.txt \
#       --topics-prompt-path ./prompts/topics.txt \
#       --collection github-conversations
#
#   # With caching options
#   index-summaries \
#     --executive-summary-prompt-path ./prompts/summary.txt \
#     --topics-prompt-path ./prompts/topics.txt \
#     --collection github-conversations \
#     --cache-path ./cache \
#     --skip-if-up-to-date \
#     urls.txt
#
# Arguments
#
#   file_path - Optional path to file containing URLs (plain text) or JSON data
#               If not provided, reads from stdin
#
# Input Formats
#
#   Plain text: One URL per line
#   JSON: Array of objects with "url" and "updated_at" fields (from search-github-conversations)
#
# Required Options
#
#   --executive-summary-prompt-path PATH - Path to LLM prompt file for executive summary
#   --topics-prompt-path PATH            - Path to LLM prompt file for topic extraction
#   --collection COLLECTION              - Qdrant collection name
#
# Optional Options
#
#   All other options are passed through to bin/index-summary:
#   --cache-path PATH                    - Root path for caching conversation and processing output
#   --updated-at TIME                    - Timestamp to pass to index-summary (overrides JSON updated_at)
#   --model MODEL                        - Embedding model to use for vector-upsert
#   --qdrant-url URL                     - Qdrant server URL (default: http://localhost:6333)
#   --max-topics NUMBER                  - Maximum number of topics to extract
#   --skip-if-up-to-date                 - Skip indexing if vector exists and is up-to-date
#
# Requirements
#
# - Ruby
# - bin/index-summary script in the same directory
# - All dependencies required by index-summary (llm CLI, gh CLI, etc.)
#
# The script will continue processing even if individual URLs fail, but will
# output error messages to stderr for any failures.

require "json"
require "open3"
require "optparse"

# Public: Runs a shell command with real-time stderr output and returns stdout.
# This allows progress messages to be visible while still capturing the result.
#
# cmd - The shell command to run (String).
#
# Returns the standard output of the command (String) or nil if command failed.
def run_cmd_safe(cmd)
  # Use popen3 to get real-time output
  Open3.popen3(cmd) do |stdin, stdout, stderr, wait_thr|
    stdin.close

    # Read and forward stderr in real-time
    stderr_thread = Thread.new do
      stderr.each_line { |line| $stderr.print line }
    end

    # Read stdout
    stdout_content = stdout.read

    # Wait for stderr thread to finish
    stderr_thread.join

    # Wait for process to complete
    unless wait_thr.value.success?
      $stderr.puts "Command failed: #{cmd}"
      return nil
    end

    stdout_content
  end
end

# Public: Parses input lines to extract URLs and optional updated_at timestamps.
#
# lines - Array of strings containing either plain URLs or JSON data.
#
# Returns an Array of Hashes with :url and :updated_at keys.
def parse_input(lines)
  input_text = lines.join("\n").strip

  # Try to parse as JSON first
  begin
    json_data = JSON.parse(input_text)
    if json_data.is_a?(Array)
      return json_data.map do |item|
        if item.is_a?(Hash) && item["url"]
          {
            url: item["url"],
            updated_at: item["updated_at"]
          }
        else
          $stderr.puts "Warning: Skipping invalid JSON item: #{item.inspect}"
          nil
        end
      end.compact
    end
  rescue JSON::ParserError
    # Not JSON, treat as plain text URLs
  end

  # Parse as plain text URLs (one per line)
  lines.map(&:strip).reject(&:empty?).map do |url|
    {
      url: url,
      updated_at: nil
    }
  end
end

# Parse command line arguments, separating options from positional arguments
options_for_index_summary = []
file_path = nil

# We need to manually parse ARGV to separate options from the file path
# because we want to pass options through to the underlying script
i = 0
while i < ARGV.length
  arg = ARGV[i]

  if arg.start_with?("--")
    # This is an option
    options_for_index_summary << arg

    # Check if this option expects a value
    if arg.include?("=")
      # Option with value in same argument (--option=value)
      # Already handled
    elsif i + 1 < ARGV.length && !ARGV[i + 1].start_with?("--")
      # Next argument is the value for this option
      i += 1
      options_for_index_summary << ARGV[i]
    end
  else
    # This is a positional argument (file path)
    if file_path.nil?
      file_path = arg
    else
      $stderr.puts "Error: Multiple file paths provided. Only one file path is supported."
      exit 1
    end
  end

  i += 1
end

# Determine the path to the index-summary script
script_dir = File.dirname(__FILE__)
index_summary_script = File.join(script_dir, "index-summary")

unless File.exist?(index_summary_script) && File.executable?(index_summary_script)
  $stderr.puts "Error: index-summary script not found or not executable at #{index_summary_script}"
  exit 1
end

# Validate required options are present
required_options = ["--executive-summary-prompt-path", "--topics-prompt-path", "--collection"]
required_options.each do |required_opt|
  unless options_for_index_summary.any? { |opt| opt.start_with?(required_opt) }
    $stderr.puts "Error: #{required_opt} is required"
    $stderr.puts
    $stderr.puts "Usage: #{$0} [options] <file_path>"
    $stderr.puts "   or: command | #{$0} [options]"
    $stderr.puts
    $stderr.puts "Required options:"
    $stderr.puts "  --executive-summary-prompt-path PATH"
    $stderr.puts "  --topics-prompt-path PATH"
    $stderr.puts "  --collection COLLECTION"
    exit 1
  end
end

# Get URLs from either file or stdin
input_lines = []

if file_path
  # Read URLs from file
  unless File.exist?(file_path)
    $stderr.puts "Error: File not found: #{file_path}"
    exit 1
  end

  begin
    input_lines = File.readlines(file_path)
  rescue => e
    $stderr.puts "Error reading file #{file_path}: #{e.message}"
    exit 1
  end
else
  # Read URLs from stdin
  if $stdin.tty?
    $stderr.puts "Error: No file path provided and stdin is not piped"
    $stderr.puts "Usage: #{$0} [options] <file_path>"
    $stderr.puts "   or: command | #{$0} [options]"
    exit 1
  end

  input_lines = $stdin.readlines
end

# Parse input to extract URLs and optional updated_at timestamps
conversations = parse_input(input_lines)

if conversations.empty?
  $stderr.puts "Error: No valid URLs found in input"
  exit 1
end

# Process each conversation
total_count = conversations.length
$stderr.puts "Processing #{total_count} conversation#{total_count == 1 ? '' : 's'}..."
$stderr.puts

conversations.each_with_index do |conversation, index|
  url = conversation[:url]
  updated_at = conversation[:updated_at]

  # Show progress
  progress = "[#{index + 1}/#{total_count}]"
  $stderr.puts "#{progress} Processing: #{url}"

  # Build command for index-summary
  cmd_parts = [index_summary_script] + options_for_index_summary

  # Add individual updated_at if available and not already specified in options
  if updated_at && !options_for_index_summary.include?("--updated-at")
    cmd_parts += ["--updated-at", updated_at]
  end

  cmd_parts << url
  cmd = cmd_parts.map { |part| "'#{part.gsub("'", "'\\''")}'" }.join(" ")

  # Run the command and check result
  result = run_cmd_safe(cmd)
  if result
    # noop
  else
    $stderr.puts "#{progress} ❌ Failed to index: #{url}"
  end
  $stderr.puts
end
