#!/usr/bin/env ruby
# bin/prepare-commit: Prepare a commit message using staged changes and LLM, following semantic commit guidelines.

require "open3"
require "optparse"
require "shellwords"
require "tempfile"

# --- Helper Methods ---

# Exits the script with an error message.
#
# message - The String error message to display.
#
# Returns nothing. Exits the script.
def error_exit(message)
  puts "Error: #{message}"
  exit 1
end

# Checks if a required command-line dependency is available in PATH.
#
# cmd - The String name of the command to check.
#
# Returns nothing. Exits if not found.
def check_dependency(cmd)
  system("which #{cmd} > /dev/null 2>&1") || error_exit("Required dependency '#{cmd}' not found in PATH.")
end

# Prompts the user to select a commit type using fzf.
#
# types - An Array of String commit types.
#
# Returns the selected commit type as a String.
def prompt_for_commit_type(types)
  fzf_input = types.join("\n")
  selected_type, _ = Open3.capture2("fzf --prompt='Select commit type: '", stdin_data: fzf_input)
  type = selected_type.strip
  error_exit("No commit type selected, exiting.") if type.empty?
  type
end

# Prompts the user to enter an optional commit scope.
#
# Returns the entered scope as a String (may be empty).
def prompt_for_scope
  print "Enter an optional scope (or leave blank): "
  gets.strip
end


# Gets the staged git diff as a String.
#
# Returns the diff output as a String.
def staged_diff
  diff, _ = Open3.capture2("git diff --staged")
  diff
end

# Returns the model flag for the llm command, or an empty string if no model is specified.
#
# llm_model - The String model name or nil.
#
# Returns a String suitable for the llm command.
def llm_model_flag(llm_model)
  llm_model && !llm_model.strip.empty? ? "-m #{Shellwords.escape(llm_model)}" : ""
end

# Generates a commit message using the LLM, given the prompt, diff, type, and scope.
#
# prompt_path - The String path to the commit message prompt template.
# diff        - The String staged diff to provide as input.
# commit_type - The String selected commit type.
# scope       - The String optional scope.
# llm_model   - The String model name or nil.
#
# Returns the generated commit message as a String.
def generate_commit_msg(prompt_path, diff, commit_type, scope, llm_model)
  prompt_content = File.read(prompt_path)
  header_line = if scope.empty?
    "Commit type: #{commit_type}"
  else
    "Commit type: #{commit_type}, Scope: #{scope}"
  end
  Tempfile.create(["llm_commit_prompt", ".txt"]) do |tmp|
    tmp.puts prompt_content
    tmp.puts header_line
    tmp.flush
    model_flag = llm_model_flag(llm_model)
    cmd = "llm #{model_flag} -f #{tmp.path}"
    msg, _ = Open3.capture2(cmd, stdin_data: diff)
    return msg.strip
  end
end

# Copies the given text to the macOS clipboard using pbcopy.
#
# text - The String to copy.
#
# Returns nothing.
def copy_to_clipboard(text)
  IO.popen("pbcopy", "w") { |f| f << text }
end

# === Main Script ===

# Step 1: Parse command-line options
options = {}

OptionParser.new do |opts|
  opts.banner = "Usage: prepare-commit [options]"
  opts.on("--commit-message-prompt-path=PATH", "Path to commit message prompt template (required)") do |p|
    options[:prompt] = p
  end
  opts.on("--llm-model MODEL", "Model alias to use for llm -m (optional)") do |model|
    options[:llm_model] = model
  end
end.parse!

# Step 2: Validate prompt path
prompt_path = options[:prompt]
prompt_path = File.expand_path(prompt_path) if prompt_path
if prompt_path.nil? || prompt_path.strip.empty? || !File.exist?(prompt_path)
  error_exit("You must provide a valid path to the commit message prompt template using --commit-message-prompt-path.")
end

# Step 3: Prompt for commit type and scope
commit_types = %w[feat fix docs style refactor test chore build ci perf revert]
commit_type = prompt_for_commit_type(commit_types)
scope = prompt_for_scope

# Step 4: Get staged diff and validate
diff = staged_diff
if diff.strip.empty?
  error_exit("No staged changes found. Please stage your changes before running this script.")
end

# Step 5: Copy diff to clipboard for user reference
copy_to_clipboard(diff)
puts "Staged diff copied to clipboard."
puts "Generating commit message using LLM..."

# Step 6: Generate commit message using LLM
commit_msg = generate_commit_msg(prompt_path, diff, commit_type, scope, options[:llm_model])
puts "Generated commit message:\n\n"
puts commit_msg

# Step 7: Confirm or regenerate commit message
loop do
  print "Use this commit message? (y/n): "
  yn = gets.strip.downcase
  if yn == "y"
    break
  elsif yn == "n"
    puts "Re-generating commit message..."
    commit_msg = generate_commit_msg(prompt_path, diff, commit_type, scope, options[:llm_model])
    puts "\nGenerated commit message:\n"
    puts commit_msg
  else
    puts "Please answer y or n."
  end
end

# Step 8: Copy final commit message to clipboard
copy_to_clipboard(commit_msg)
puts "\nFinal commit message copied to clipboard."

# Step 9: Optionally, open git commit editor with message pre-filled
unless system("git", "commit", "--edit", "-m", commit_msg)
  error_exit("Git commit failed.")
end
